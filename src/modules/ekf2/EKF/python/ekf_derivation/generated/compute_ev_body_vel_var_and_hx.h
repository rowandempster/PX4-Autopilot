// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_ev_body_vel_var_and_hx
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *
 * Outputs:
 *     incomp_innov_var: Matrix31
 *     H: Matrix23_1
 */
template <typename Scalar>
void ComputeEvBodyVelVarAndHx(const matrix::Matrix<Scalar, 24, 1>& state,
                              const matrix::Matrix<Scalar, 23, 23>& P,
                              matrix::Matrix<Scalar, 3, 1>* const incomp_innov_var = nullptr,
                              matrix::Matrix<Scalar, 23, 1>* const H = nullptr) {
  // Total ops: 88

  // Input arrays

  // Intermediate terms (20)
  const Scalar _tmp0 = -2 * std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp1 = 1 - 2 * std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = 2 * state(2, 0);
  const Scalar _tmp4 = _tmp3 * state(0, 0);
  const Scalar _tmp5 = 2 * state(1, 0) * state(3, 0);
  const Scalar _tmp6 = -_tmp4 + _tmp5;
  const Scalar _tmp7 = 2 * state(0, 0);
  const Scalar _tmp8 = _tmp7 * state(3, 0);
  const Scalar _tmp9 = _tmp3 * state(1, 0);
  const Scalar _tmp10 = _tmp8 + _tmp9;
  const Scalar _tmp11 = -2 * std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp12 = _tmp0 + _tmp11 + 1;
  const Scalar _tmp13 = _tmp3 * state(3, 0);
  const Scalar _tmp14 = _tmp7 * state(1, 0);
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = -_tmp8 + _tmp9;
  const Scalar _tmp17 = _tmp4 + _tmp5;
  const Scalar _tmp18 = _tmp13 - _tmp14;
  const Scalar _tmp19 = _tmp1 + _tmp11;

  // Output terms (2)
  if (incomp_innov_var != nullptr) {
    matrix::Matrix<Scalar, 3, 1>& _incomp_innov_var = (*incomp_innov_var);

    _incomp_innov_var(0, 0) = _tmp10 * (P(3, 4) * _tmp2 + P(4, 4) * _tmp10 + P(5, 4) * _tmp6) +
                              _tmp2 * (P(3, 3) * _tmp2 + P(4, 3) * _tmp10 + P(5, 3) * _tmp6) +
                              _tmp6 * (P(3, 5) * _tmp2 + P(4, 5) * _tmp10 + P(5, 5) * _tmp6);
    _incomp_innov_var(1, 0) = _tmp12 * (P(3, 4) * _tmp16 + P(4, 4) * _tmp12 + P(5, 4) * _tmp15) +
                              _tmp15 * (P(3, 5) * _tmp16 + P(4, 5) * _tmp12 + P(5, 5) * _tmp15) +
                              _tmp16 * (P(3, 3) * _tmp16 + P(4, 3) * _tmp12 + P(5, 3) * _tmp15);
    _incomp_innov_var(2, 0) = _tmp17 * (P(3, 3) * _tmp17 + P(4, 3) * _tmp18 + P(5, 3) * _tmp19) +
                              _tmp18 * (P(3, 4) * _tmp17 + P(4, 4) * _tmp18 + P(5, 4) * _tmp19) +
                              _tmp19 * (P(3, 5) * _tmp17 + P(4, 5) * _tmp18 + P(5, 5) * _tmp19);
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 23, 1>& _h = (*H);

    _h.setZero();

    _h(3, 0) = _tmp2;
    _h(4, 0) = _tmp10;
    _h(5, 0) = _tmp6;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
