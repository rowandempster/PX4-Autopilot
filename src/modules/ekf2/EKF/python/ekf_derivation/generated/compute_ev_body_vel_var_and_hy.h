// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_ev_body_vel_var_and_hy
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *
 * Outputs:
 *     incomp_innov_var: Scalar
 *     H: Matrix1_23
 */
template <typename Scalar>
void ComputeEvBodyVelVarAndHy(const matrix::Matrix<Scalar, 24, 1>& state,
                              const matrix::Matrix<Scalar, 23, 23>& P,
                              Scalar* const incomp_innov_var = nullptr,
                              matrix::Matrix<Scalar, 1, 23>* const H = nullptr) {
  // Total ops: 34

  // Input arrays

  // Intermediate terms (5)
  const Scalar _tmp0 =
      -2 * std::pow(state(1, 0), Scalar(2)) - 2 * std::pow(state(3, 0), Scalar(2)) + 1;
  const Scalar _tmp1 = 2 * state(3, 0);
  const Scalar _tmp2 = 2 * state(1, 0);
  const Scalar _tmp3 = _tmp1 * state(2, 0) + _tmp2 * state(0, 0);
  const Scalar _tmp4 = -_tmp1 * state(0, 0) + _tmp2 * state(2, 0);

  // Output terms (2)
  if (incomp_innov_var != nullptr) {
    Scalar& _incomp_innov_var = (*incomp_innov_var);

    _incomp_innov_var = _tmp0 * (P(3, 4) * _tmp4 + P(4, 4) * _tmp0 + P(5, 4) * _tmp3) +
                        _tmp3 * (P(3, 5) * _tmp4 + P(4, 5) * _tmp0 + P(5, 5) * _tmp3) +
                        _tmp4 * (P(3, 3) * _tmp4 + P(4, 3) * _tmp0 + P(5, 3) * _tmp3);
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 1, 23>& _h = (*H);

    _h.setZero();

    _h(0, 3) = _tmp4;
    _h(0, 4) = _tmp0;
    _h(0, 5) = _tmp3;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
